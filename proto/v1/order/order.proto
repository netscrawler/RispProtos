syntax = "proto3";

package order;
option go_package = "netscrawler.order.v1;orderv1";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service OrderService {
  // Основные операции с заказами
  rpc CreateOrder(CreateOrderRequest) returns (OrderResponse);
  rpc GetOrder(GetOrderRequest) returns (OrderResponse);
  rpc ListOrders(ListOrdersRequest) returns (ListOrdersResponse);
  rpc UpdateOrderStatus(UpdateOrderStatusRequest) returns (google.protobuf.Empty);

  // Управление элементами заказа
  rpc AddOrderItem(AddOrderItemRequest) returns (OrderItem);
  rpc UpdateOrderItem(UpdateOrderItemRequest) returns (OrderItem);

  // Платежи
  rpc InitiatePayment(PaymentRequest) returns (PaymentResponse);
  rpc ProcessPaymentCallback(PaymentCallbackRequest) returns (google.protobuf.Empty);

  // История и отчетность
  rpc GetOrderHistory(GetOrderRequest) returns (OrderHistoryResponse);
}

// Типы заказов
enum OrderType {
  ORDER_TYPE_UNSPECIFIED = 0;
  ORDER_TYPE_DINE_IN = 1;     // В заведении
  ORDER_TYPE_DELIVERY = 2;    // Доставка
  ORDER_TYPE_TAKEAWAY = 3;    // Самовывоз
}

// Статусы заказа
enum OrderStatus {
  ORDER_STATUS_UNSPECIFIED = 0;
  ORDER_STATUS_CREATED = 1;    // Создан
  ORDER_STATUS_CONFIRMED = 2;  // Подтвержден
  ORDER_STATUS_COOKING = 3;    // Готовится
  ORDER_STATUS_READY = 4;      // Готов к выдаче
  ORDER_STATUS_DELIVERED = 5;  // Доставлен
  ORDER_STATUS_CANCELLED = 6;  // Отменен
}

// Статусы приготовления блюд
enum CookingStatus {
  COOKING_STATUS_UNSPECIFIED = 0;
  COOKING_STATUS_PENDING = 1;   // Ожидает
  COOKING_STATUS_PREPARING = 2; // Готовится
  COOKING_STATUS_READY = 3;     // Готово
  COOKING_STATUS_SERVED = 4;    // Подано
}

message Order {
  string id = 1;                    // UUID
  int64 user_id = 2;                // ID клиента
  int64 staff_id = 3;               // ID сотрудника
  OrderType order_type = 4;
  OrderStatus status = 5;
  string table_number = 6;          // Для DINE_IN
  bytes delivery_address = 7;       // JSONB
  double total_amount = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
  repeated OrderItem items = 11;
}

message OrderResponse {
    string id = 1;
    string status = 2;
    double total_amount = 3;
}
message OrderItem {
  string item_id = 1;
  int64 dish_id = 2;
  int32 quantity = 3;
  double price = 4;
  string special_requests = 5;
  CookingStatus cooking_status = 6;
  google.protobuf.Timestamp ready_at = 7;
}

message OrderStatusUpdate {
  OrderStatus status = 1;
  string reason = 2;               // Причина изменения
  int64 changed_by = 3;            // ID сотрудника/системы
  google.protobuf.Timestamp changed_at = 4;
}

// Запросы/Ответы

message CreateOrderRequest {
  int64 user_id = 1;
  OrderType order_type = 2;
  oneof location {
    string table_number = 3;       // Для DINE_IN
    bytes delivery_address = 4;    // JSON
  }
  repeated OrderItemCreation items = 5;
}

message OrderItemCreation {
  int64 dish_id = 1;
  int32 quantity = 2;
  string special_requests = 3;
}

message GetOrderRequest {
  string order_id = 1;
}

message ListOrdersRequest {
  optional int64 user_id = 1;      // Фильтр по пользователю
  optional OrderStatus status = 2; // Фильтр по статусу
  int32 page = 3;
  int32 page_size = 4;
}

message ListOrdersResponse {
  repeated Order orders = 1;
  int32 total_count = 2;
}

message UpdateOrderStatusRequest {
  string order_id = 1;
  OrderStatus status = 2;
  string reason = 3;
  int64 changed_by = 4;
}

message AddOrderItemRequest {
  string order_id = 1;
  OrderItemCreation item = 2;
}

message UpdateOrderItemRequest {
  string order_id = 1;
  string item_id = 2;
  optional int32 quantity = 3;
  optional string special_requests = 4;
  optional CookingStatus cooking_status = 5;
}

// Платежи
message PaymentRequest {
  string order_id = 1;
  double amount = 2;
  string payment_method = 3;     // card/cash
  string callback_url = 4;       // Для вебхуков
}

message PaymentResponse {
  string payment_id = 1;
  string payment_url = 2;        // URL для оплаты
  string status = 3;
}

message PaymentCallbackRequest {
  string payment_id = 1;
  string status = 2;             // success/failed
  string transaction_id = 3;
  bytes metadata = 4;            // Дополнительные данные
}

// История
message OrderHistoryResponse {
  repeated OrderStatusUpdate history = 1;
}

